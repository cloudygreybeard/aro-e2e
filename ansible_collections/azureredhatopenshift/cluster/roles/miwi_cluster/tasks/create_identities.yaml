- name: create_identities | platformworkloadidentityrolesets
  ansible.builtin.set_fact:
    platformworkloadidentityrolesets: >
      {{
        lookup("ansible.builtin.url",
        "https://localhost:8443/subscriptions/"
        + sub_info.subscription_id
        + "/providers/Microsoft.RedHatOpenShift/locations/"
        + location
        + "/platformworkloadidentityrolesets?api-version=2024-08-12-preview"
        , validate_certs=false, split_lines=false)
      }}

- name: create_identities | Create cluster MSI
  ansible.builtin.command:
    argv:
      - az
      - identity
      - create
      - --name={{ name }}-Cluster
      - --resource-group={{ resource_group }}
      - -o=json
  delegate_to: localhost
  register: clustermsi_create
- name: create_identities | Create cluster MSI role assignment
  azure.azcollection.azure_rm_roleassignment:
    scope: "{{ rg_info.state.id }}"
    assignee_object_id: "{{ (clustermsi_create.stdout | from_json).principalId }}"
    role_definition_id: "/subscriptions/{{ sub_info.subscription_id }}/providers/Microsoft.Authorization/roleDefinitions/ef318e2a-8334-4a05-9e4a-295a196c6a6e" # RoleAzureRedHatOpenShiftFederatedCredentialRole
  delegate_to: localhost
  retries: 3 # Retry because it might need to propagate
  delay: 10
- name: create_identities | Mock MSI role assignment
  # when: mock_msi_object_id is defined
  azure.azcollection.azure_rm_roleassignment:
    scope: "{{ rg_info.state.id }}"
    assignee_object_id: "{{ mock_msi_object_id }}"
    role_definition_id: "/subscriptions/{{ sub_info.subscription_id }}/providers/Microsoft.Authorization/roleDefinitions/97c5b690-69b4-49a5-aa0a-3a685c28e3e6"
  delegate_to: localhost
- name: create_identities | user_assigned_identity
  ansible.builtin.set_fact:
    user_assigned_identities: |
      {
        "{{ (clustermsi_create.stdout | from_json).id }}": {}
      }
- name: create_identities | Create platform identities
  loop: "{{ platformworkloadidentityrolesets.value[0].properties.platformWorkloadIdentityRoles }}"
  ansible.builtin.command:
    argv:
      - az
      - identity
      - create
      - --name={{ name }}-{{ item.operatorName }}
      - --resource-group={{ resource_group }}
      - -o=json
  register: az_identity_create
  delegate_to: localhost
- name: create_identities | Create role assignments
  loop: "{{ az_identity_create.results }}"
  azure.azcollection.azure_rm_roleassignment:
    scope: "{{ rg_info.state.id }}"
    assignee_object_id: "{{ (item.stdout | from_json).principalId }}"
    role_definition_id: "{{ item.item.roleDefinitionId }}"
  register: roleassignment_create
  delegate_to: localhost
- name: create_identities | Create mock MSI role assignments
  # when: mock_msi_object_id is defined
  loop: "{{ az_identity_create.results }}"
  azure.azcollection.azure_rm_roleassignment:
    scope: "{{ rg_info.state.id }}"
    assignee_object_id: "{{ mock_msi_object_id }}"
    role_definition_id: "{{ item.item.roleDefinitionId }}"
  register: roleassignment_create
  delegate_to: localhost
- name: create_identities | Set MIWI cluster creation parameters
  ansible.builtin.set_fact:
    platform_workload_identities: |
      {% set comma = joiner(",") %}
      {
        {% for item in az_identity_create.results %}
        {{ comma() }}"{{ item.item.operatorName }}": {"resource_id": "{{ (item.stdout | from_json).id }}" }
        {% endfor %}
      }
    cluster_extra_args: |
      [
      "--enable-managed-identity"
      ,"--asign-cluster-identity={{ name }}-Cluster"
      {% for item in platformworkloadidentityrolesets.value[0].properties.platformWorkloadIdentityRoles %}
      ,"--assign-platform-worload-identity {{ item.operatorName }} {{ name }}-{{ item.operatorName }}"
      {% endfor %}
      ]
- name: create_identities | Show user assigned identity
  debug:
    var: user_assigned_identities
- name: create_identities | Show platform workload identities
  debug:
    var: platform_workload_identities
